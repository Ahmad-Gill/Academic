; bubble sor             xrithm as a subroutine
[org 0x0100]
jmp start
PF_Array: dw 566, 189, 243, 60, 131, 403, 238, 612, 32, 26, 285, 501, 503, 241, 758, 98, 380,545, 99, 659, 652, 580, 232, 530, 956, 701, 790, 967, 958, 745, 341, 400, 988, 20, 384, 571,126, 886, 549, 983, 619, 876, 369, 221, 474, 818, 900, 983, 178, 176, 824, 188, 141, 467, 128,705, 200, 885, 647, 841, 571, 551, 909, 499, 456, 796, 766, 530, 68, 51, 559, 927, 444, 188,452, 688, 526, 307, 267, 572, 315, 512, 481, 824, 72, 905, 581, 937, 300, 42, 31, 914, 971, 872,633, 632, 794, 666, 406, 133
swap: db 0


bubblesort_Deccending:
	mov cx, 50		
	 dec cx	 	; last element not compared
	shl cx, 1 				; turn into byte count
	mainloopp: mov si, 100 		; initialize array index to zero
	mov byte [swap], 0 		; reset swap flag to no swaps
	innerloopp: mov ax, [bx+si] 	; load number in ax
	cmp ax, [bx+si+2] 		; compare with next number
	jae noswapp				 ; no swap if already in order
	mov dx, [bx+si+2]			 ; load second element in dx
	mov [bx+si], dx			 ; store first number in second
	mov [bx+si+2], ax 		; store second number in first
	mov byte [swap], 1 		; flag that a swap has been done
	noswapp: add si, 2 		; advance si to next index
	cmp si, 200 				; are we at last index
	jne innerloopp 			; if not compare next two
	cmp byte [swap], 1 		; check if a swap has been done
	je mainloopp 			; if yes make another pass
	ret


bubblesort_Accending:
	mov cx, 50		
	 dec cx	 	; last element not compared
	shl cx, 1 				; turn into byte count
	mainloop: mov si, 0 		; initialize array index to zero
	mov byte [swap], 0 		; reset swap flag to no swaps
	innerloop: mov ax, [bx+si] 	; load number in ax
	cmp ax, [bx+si+2] 		; compare with next number
	jbe noswap				 ; no swap if already in order
	mov dx, [bx+si+2]			 ; load second element in dx
	mov [bx+si], dx			 ; store first number in second
	mov [bx+si+2], ax 		; store second number in first
	mov byte [swap], 1 		; flag that a swap has been done
	noswap: add si, 2 		; advance si to next index
	cmp si, cx 				; are we at last index
	jne innerloop 			; if not compare next two
	cmp byte [swap], 1 		; check if a swap has been done
	je mainloop 			; if yes make another pass
	ret  					; go back to where we came from
	start:
	call clearSecreen
	 mov bx, PF_Array		; send start of array in bx
				; send count of elements in cx
	call bubblesort_Accending
	 mov bx, PF_Array		; send start of array in bx 
	call bubblesort_Deccending
	mov si,-2
	mov  di,160
	mov cx,100
print:
	add si,2
	
		mov ax,[PF_Array+si]
	push ax
	push di
	
	call printnum
add di,20
	loop print
mov ax, 0x4c00 			; terminate program
	int 0x21


printnum:
	push bp
	mov bp, sp
	push es
	push ax
	push bx
	push cx
	push dx
	push di
	mov ax, 0xb800
	mov es, ax ; point es to video base
	mov ax, [bp+6] ; load number in ax
	mov bx, 10 ; use base 10 for division
	mov cx, 0 ; initialize count of digits
nextdigit:
	 mov dx, 0 ; zero upper half of dividend
	div bx ; divide by 10
	add dl, 0x30 ; convert digit into ascii value
	push dx ; save ascii value on stack
	inc cx ; increment count of values
	cmp ax, 0 ; is the quotient zero
	jnz nextdigit ; if no divide it again
	mov di, [bp+4]
	nextpos: pop dx ; remove a digit from the stack
	mov dh, 0x07 ; use normal attribute
	mov [es:di], dx ; print char on screen
	add di, 2 ; move to next screen location
	loop nextpos ; repeat for all digits on stack
	pop di
	pop dx
	pop cx
	pop bx
	pop ax
	pop es
	pop bp
	ret 2


clearSecreen:
	mov ax, 0xb800 		; load video base in ax
	mov es, ax 			; point es to video base
	mov di, 0 			; point di to top left column
nextchar: 
	mov word [es:di], 0x0720 ; clear next char on screen
	add di, 2 			; move to next screen location
	cmp di, 4000 		; has the whole screen cleared
	jne nextchar 
	ret