; bubble sor             xrithm as a subroutine
[org 0x0100]
jmp start
PF_Array: dw 566, 189, 243, 60, 131, 403, 238, 612, 32, 26, 285, 501, 503, 241, 758, 98, 380,545, 99, 659, 652, 580, 232, 530, 956, 701, 790, 967, 958, 745, 341, 400, 988, 20, 384, 571,126, 886, 549, 983, 619, 876, 369, 221, 474, 818, 900, 983, 178, 176, 824, 188, 141, 467, 128,705, 200, 885, 647, 841, 571, 551, 909, 499, 456, 796, 766, 530, 68, 51, 559, 927, 444, 188,452, 688, 526, 307, 267, 572, 315, 512, 481, 824, 72, 905, 581, 937, 300, 42, 31, 914, 971, 872,633, 632, 794, 666, 406, 133
swap: db 0


bubblesort_Deccending:
	mov cx, 50		
	 dec cx	 	; last element not compared
	shl cx, 1 				; turn into byte count
	mainloopp: mov si, 100 		; initialize array index to zero
	mov byte [swap], 0 		; reset swap flag to no swaps
	innerloopp: mov ax, [bx+si] 	; load number in ax
	cmp ax, [bx+si+2] 		; compare with next number
	jae noswapp				 ; no swap if already in order
	mov dx, [bx+si+2]			 ; load second element in dx
	mov [bx+si], dx			 ; store first number in second
	mov [bx+si+2], ax 		; store second number in first
	mov byte [swap], 1 		; flag that a swap has been done
	noswapp: add si, 2 		; advance si to next index
	cmp si, 200 				; are we at last index
	jne innerloopp 			; if not compare next two
	cmp byte [swap], 1 		; check if a swap has been done
	je mainloopp 			; if yes make another pass
	ret


bubblesort_Accending:
	mov cx, 50		
	 dec cx	 	; last element not compared
	shl cx, 1 				; turn into byte count
	mainloop: mov si, 0 		; initialize array index to zero
	mov byte [swap], 0 		; reset swap flag to no swaps
	innerloop: mov ax, [bx+si] 	; load number in ax
	cmp ax, [bx+si+2] 		; compare with next number
	jbe noswap				 ; no swap if already in order
	mov dx, [bx+si+2]			 ; load second element in dx
	mov [bx+si], dx			 ; store first number in second
	mov [bx+si+2], ax 		; store second number in first
	mov byte [swap], 1 		; flag that a swap has been done
	noswap: add si, 2 		; advance si to next index
	cmp si, cx 				; are we at last index
	jne innerloop 			; if not compare next two
	cmp byte [swap], 1 		; check if a swap has been done
	je mainloop 			; if yes make another pass
	ret  					; go back to where we came from
	start:
	call clearSecreen
	 mov bx, PF_Array		; send start of array in bx
				; send count of elements in cx
	call bubblesort_Accending
	 mov bx, PF_Array		; send start of array in bx 
	call bubblesort_Deccending

mov ax, 0x4c00 			; terminate program
	int 0x21


